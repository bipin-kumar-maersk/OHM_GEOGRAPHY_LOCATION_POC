/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.Geography.smds.operations.MSK;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Geography BDA details */
@org.apache.avro.specific.AvroGenerated
public class GeographyBDADetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4555902433290860819L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeographyBDADetails\",\"namespace\":\"com.maersk.Geography.smds.operations.MSK\",\"doc\":\"Geography BDA details\",\"fields\":[{\"name\":\"bdaRowid\",\"type\":[\"null\",\"string\"]},{\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"name\":\"Type\",\"type\":[\"null\",\"string\"]},{\"name\":\"BDAType\",\"type\":[\"null\",\"string\"]},{\"name\":\"GeographyBDAAlternateCodeDetails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GeographyBDAAlternateCode\",\"doc\":\"Geography BDA AlternateCode details\",\"fields\":[{\"name\":\"CodeType\",\"type\":[\"null\",\"string\"]},{\"name\":\"Code\",\"type\":[\"null\",\"string\"]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GeographyBDADetails> ENCODER =
      new BinaryMessageEncoder<GeographyBDADetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GeographyBDADetails> DECODER =
      new BinaryMessageDecoder<GeographyBDADetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<GeographyBDADetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<GeographyBDADetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GeographyBDADetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this GeographyBDADetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a GeographyBDADetails from a ByteBuffer. */
  public static GeographyBDADetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence bdaRowid;
  @Deprecated public java.lang.CharSequence Name;
  @Deprecated public java.lang.CharSequence Type;
  @Deprecated public java.lang.CharSequence BDAType;
  @Deprecated public java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> GeographyBDAAlternateCodeDetails;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GeographyBDADetails() {}

  /**
   * All-args constructor.
   * @param bdaRowid The new value for bdaRowid
   * @param Name The new value for Name
   * @param Type The new value for Type
   * @param BDAType The new value for BDAType
   * @param GeographyBDAAlternateCodeDetails The new value for GeographyBDAAlternateCodeDetails
   */
  public GeographyBDADetails(java.lang.CharSequence bdaRowid, java.lang.CharSequence Name, java.lang.CharSequence Type, java.lang.CharSequence BDAType, java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> GeographyBDAAlternateCodeDetails) {
    this.bdaRowid = bdaRowid;
    this.Name = Name;
    this.Type = Type;
    this.BDAType = BDAType;
    this.GeographyBDAAlternateCodeDetails = GeographyBDAAlternateCodeDetails;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bdaRowid;
    case 1: return Name;
    case 2: return Type;
    case 3: return BDAType;
    case 4: return GeographyBDAAlternateCodeDetails;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bdaRowid = (java.lang.CharSequence)value$; break;
    case 1: Name = (java.lang.CharSequence)value$; break;
    case 2: Type = (java.lang.CharSequence)value$; break;
    case 3: BDAType = (java.lang.CharSequence)value$; break;
    case 4: GeographyBDAAlternateCodeDetails = (java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bdaRowid' field.
   * @return The value of the 'bdaRowid' field.
   */
  public java.lang.CharSequence getBdaRowid() {
    return bdaRowid;
  }

  /**
   * Sets the value of the 'bdaRowid' field.
   * @param value the value to set.
   */
  public void setBdaRowid(java.lang.CharSequence value) {
    this.bdaRowid = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }

  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Type' field.
   * @return The value of the 'Type' field.
   */
  public java.lang.CharSequence getType() {
    return Type;
  }

  /**
   * Sets the value of the 'Type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.Type = value;
  }

  /**
   * Gets the value of the 'BDAType' field.
   * @return The value of the 'BDAType' field.
   */
  public java.lang.CharSequence getBDAType() {
    return BDAType;
  }

  /**
   * Sets the value of the 'BDAType' field.
   * @param value the value to set.
   */
  public void setBDAType(java.lang.CharSequence value) {
    this.BDAType = value;
  }

  /**
   * Gets the value of the 'GeographyBDAAlternateCodeDetails' field.
   * @return The value of the 'GeographyBDAAlternateCodeDetails' field.
   */
  public java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> getGeographyBDAAlternateCodeDetails() {
    return GeographyBDAAlternateCodeDetails;
  }

  /**
   * Sets the value of the 'GeographyBDAAlternateCodeDetails' field.
   * @param value the value to set.
   */
  public void setGeographyBDAAlternateCodeDetails(java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> value) {
    this.GeographyBDAAlternateCodeDetails = value;
  }

  /**
   * Creates a new GeographyBDADetails RecordBuilder.
   * @return A new GeographyBDADetails RecordBuilder
   */
  public static com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder newBuilder() {
    return new com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder();
  }

  /**
   * Creates a new GeographyBDADetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GeographyBDADetails RecordBuilder
   */
  public static com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder newBuilder(com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder other) {
    return new com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder(other);
  }

  /**
   * Creates a new GeographyBDADetails RecordBuilder by copying an existing GeographyBDADetails instance.
   * @param other The existing instance to copy.
   * @return A new GeographyBDADetails RecordBuilder
   */
  public static com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder newBuilder(com.maersk.Geography.smds.operations.MSK.GeographyBDADetails other) {
    return new com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder(other);
  }

  /**
   * RecordBuilder for GeographyBDADetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeographyBDADetails>
    implements org.apache.avro.data.RecordBuilder<GeographyBDADetails> {

    private java.lang.CharSequence bdaRowid;
    private java.lang.CharSequence Name;
    private java.lang.CharSequence Type;
    private java.lang.CharSequence BDAType;
    private java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> GeographyBDAAlternateCodeDetails;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bdaRowid)) {
        this.bdaRowid = data().deepCopy(fields()[0].schema(), other.bdaRowid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Type)) {
        this.Type = data().deepCopy(fields()[2].schema(), other.Type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.BDAType)) {
        this.BDAType = data().deepCopy(fields()[3].schema(), other.BDAType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.GeographyBDAAlternateCodeDetails)) {
        this.GeographyBDAAlternateCodeDetails = data().deepCopy(fields()[4].schema(), other.GeographyBDAAlternateCodeDetails);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GeographyBDADetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.Geography.smds.operations.MSK.GeographyBDADetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.bdaRowid)) {
        this.bdaRowid = data().deepCopy(fields()[0].schema(), other.bdaRowid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Type)) {
        this.Type = data().deepCopy(fields()[2].schema(), other.Type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.BDAType)) {
        this.BDAType = data().deepCopy(fields()[3].schema(), other.BDAType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.GeographyBDAAlternateCodeDetails)) {
        this.GeographyBDAAlternateCodeDetails = data().deepCopy(fields()[4].schema(), other.GeographyBDAAlternateCodeDetails);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'bdaRowid' field.
      * @return The value.
      */
    public java.lang.CharSequence getBdaRowid() {
      return bdaRowid;
    }

    /**
      * Sets the value of the 'bdaRowid' field.
      * @param value The value of 'bdaRowid'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder setBdaRowid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bdaRowid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaRowid' field has been set.
      * @return True if the 'bdaRowid' field has been set, false otherwise.
      */
    public boolean hasBdaRowid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bdaRowid' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder clearBdaRowid() {
      bdaRowid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }

    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return Type;
    }

    /**
      * Sets the value of the 'Type' field.
      * @param value The value of 'Type'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Type' field has been set.
      * @return True if the 'Type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Type' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder clearType() {
      Type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'BDAType' field.
      * @return The value.
      */
    public java.lang.CharSequence getBDAType() {
      return BDAType;
    }

    /**
      * Sets the value of the 'BDAType' field.
      * @param value The value of 'BDAType'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder setBDAType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.BDAType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'BDAType' field has been set.
      * @return True if the 'BDAType' field has been set, false otherwise.
      */
    public boolean hasBDAType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'BDAType' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder clearBDAType() {
      BDAType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'GeographyBDAAlternateCodeDetails' field.
      * @return The value.
      */
    public java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> getGeographyBDAAlternateCodeDetails() {
      return GeographyBDAAlternateCodeDetails;
    }

    /**
      * Sets the value of the 'GeographyBDAAlternateCodeDetails' field.
      * @param value The value of 'GeographyBDAAlternateCodeDetails'.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder setGeographyBDAAlternateCodeDetails(java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode> value) {
      validate(fields()[4], value);
      this.GeographyBDAAlternateCodeDetails = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'GeographyBDAAlternateCodeDetails' field has been set.
      * @return True if the 'GeographyBDAAlternateCodeDetails' field has been set, false otherwise.
      */
    public boolean hasGeographyBDAAlternateCodeDetails() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'GeographyBDAAlternateCodeDetails' field.
      * @return This builder.
      */
    public com.maersk.Geography.smds.operations.MSK.GeographyBDADetails.Builder clearGeographyBDAAlternateCodeDetails() {
      GeographyBDAAlternateCodeDetails = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GeographyBDADetails build() {
      try {
        GeographyBDADetails record = new GeographyBDADetails();
        record.bdaRowid = fieldSetFlags()[0] ? this.bdaRowid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Type = fieldSetFlags()[2] ? this.Type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.BDAType = fieldSetFlags()[3] ? this.BDAType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.GeographyBDAAlternateCodeDetails = fieldSetFlags()[4] ? this.GeographyBDAAlternateCodeDetails : (java.util.List<com.maersk.Geography.smds.operations.MSK.GeographyBDAAlternateCode>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GeographyBDADetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<GeographyBDADetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GeographyBDADetails>
    READER$ = (org.apache.avro.io.DatumReader<GeographyBDADetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
